name: Build tag, push docker image, pull in the server and deploy then test

on:
  workflow_call:
    inputs:
      APP:
        required: true
        type: string
      ENV:
        required: true
        type: string
    secrets:
      DOCKER_USER:
        required: true
      DOCKER_PASSWORD:
        required: true
      SSH_SERVER:
        required: true
      SSH_USER:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      ENV_VARS:
        required: true

env:
  APP: ${{ inputs.APP }}
  ENV: ${{ inputs.ENV }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: docker login
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: create .env file
      run: |
        echo "${{ secrets.ENV_VARS }}" > .env
        cat .env 
    - name: Build docker image
      run: docker build -t $APP .
    - name: Docker tag
      run: docker tag $APP remidandois/$APP
    - name: Docker push
      run: docker push remidandois/$APP
  pull-deploy:
    runs-on: ubuntu-latest
    needs:
      - build-push
    steps:
      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client
      - name: create folder
        run: mkdir ~/.ssh
      - name: Set Up SSH Key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
      - name: Add server to known_hosts
        run: ssh-keyscan -t rsa ${{ secrets.SSH_SERVER }} >> ~/.ssh/known_hosts
      - name: Connect to Server and Deploy
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'docker pull remidandois/${{ inputs.APP }}'
      - name: restart compose
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'docker-compose -f ~/apps/compose.yaml up -d'
      - name: rmi old images
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_SERVER }} 'docker rmi $(docker images | grep "<none>" | awk "{ print $3; }")' || true
  test:
    runs-on: ubuntu-latest
    needs:
      - pull-deploy
    steps:
      - name: Trigger non-regression execution
        run: |
          if [ -z "$APP" ] || [ -z "$ENV" ]; then
            if [ -z "$APP" ]; then echo "'APP' variable missing"; fi
            if [ -z "$ENV" ]; then echo "'ENV' variable missing"; fi
            exit 1
          else
            echo "APP='$APP', ENV='$ENV'"
          fi;
